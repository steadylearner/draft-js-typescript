{"id":"../node_modules/draft-js/lib/removeRangeFromContentState.js","dependencies":[{"name":"/home/steadylearner/Desktop/code/site/Rust-Full-Stack/draft-js/package.json","includedInParent":true,"mtime":1586707075595},{"name":"/home/steadylearner/Desktop/code/site/Rust-Full-Stack/draft-js/node_modules/draft-js/package.json","includedInParent":true,"mtime":1586540831660},{"name":"./ContentBlockNode","loc":{"line":13,"column":31},"parent":"/home/steadylearner/Desktop/code/site/Rust-Full-Stack/draft-js/node_modules/draft-js/lib/removeRangeFromContentState.js","resolved":"/home/steadylearner/Desktop/code/site/Rust-Full-Stack/draft-js/node_modules/draft-js/lib/ContentBlockNode.js"},{"name":"./getNextDelimiterBlockKey","loc":{"line":15,"column":39},"parent":"/home/steadylearner/Desktop/code/site/Rust-Full-Stack/draft-js/node_modules/draft-js/lib/removeRangeFromContentState.js","resolved":"/home/steadylearner/Desktop/code/site/Rust-Full-Stack/draft-js/node_modules/draft-js/lib/getNextDelimiterBlockKey.js"},{"name":"immutable","loc":{"line":17,"column":24},"parent":"/home/steadylearner/Desktop/code/site/Rust-Full-Stack/draft-js/node_modules/draft-js/lib/removeRangeFromContentState.js","resolved":"/home/steadylearner/Desktop/code/site/Rust-Full-Stack/draft-js/node_modules/immutable/dist/immutable.js"}],"generated":{"js":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar getNextDelimiterBlockKey = require(\"./getNextDelimiterBlockKey\");\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List,\n    Map = Immutable.Map;\n\nvar transformBlock = function transformBlock(key, blockMap, func) {\n  if (!key) {\n    return;\n  }\n\n  var block = blockMap.get(key);\n\n  if (!block) {\n    return;\n  }\n\n  blockMap.set(key, func(block));\n};\n/**\n * Ancestors needs to be preserved when there are non selected\n * children to make sure we do not leave any orphans behind\n */\n\n\nvar getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {\n  var parents = [];\n\n  if (!blockKey) {\n    return parents;\n  }\n\n  var blockNode = blockMap.get(blockKey);\n\n  while (blockNode && blockNode.getParentKey()) {\n    var parentKey = blockNode.getParentKey();\n\n    if (parentKey) {\n      parents.push(parentKey);\n    }\n\n    blockNode = parentKey ? blockMap.get(parentKey) : null;\n  }\n\n  return parents;\n};\n/**\n * Get all next delimiter keys until we hit a root delimiter and return\n * an array of key references\n */\n\n\nvar getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {\n  var nextDelimiters = [];\n\n  if (!block) {\n    return nextDelimiters;\n  }\n\n  var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\n\n  while (nextDelimiter && blockMap.get(nextDelimiter)) {\n    var _block = blockMap.get(nextDelimiter);\n\n    nextDelimiters.push(nextDelimiter); // we do not need to keep checking all root node siblings, just the first occurance\n\n    nextDelimiter = _block.getParentKey() ? getNextDelimiterBlockKey(_block, blockMap) : null;\n  }\n\n  return nextDelimiters;\n};\n\nvar getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  } // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n\n\n  var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();\n\n  while (nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)) {\n    nextValidSiblingKey = originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\n  }\n\n  return nextValidSiblingKey;\n};\n\nvar getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  } // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n\n\n  var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();\n\n  while (prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)) {\n    prevValidSiblingKey = originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\n  }\n\n  return prevValidSiblingKey;\n};\n\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, startBlock, endBlock, originalBlockMap) {\n  return blockMap.withMutations(function (blocks) {\n    // update start block if its retained\n    transformBlock(startBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n      });\n    }); // update endblock if its retained\n\n    transformBlock(endBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n      });\n    }); // update start block parent ancestors\n\n    getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      return transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    }); // update start block next - can only happen if startBlock == endBlock\n\n    transformBlock(startBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: startBlock.getPrevSiblingKey()\n      });\n    }); // update start block prev\n\n    transformBlock(startBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap)\n      });\n    }); // update end block next\n\n    transformBlock(endBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n      });\n    }); // update end block prev\n\n    transformBlock(endBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: endBlock.getNextSiblingKey()\n      });\n    }); // update end block parent ancestors\n\n    getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    }); // update next delimiters all the way to a root delimiter\n\n    getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function (delimiterKey) {\n      return transformBlock(delimiterKey, blocks, function (block) {\n        return block.merge({\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    }); // if parent (startBlock) was deleted\n\n    if (blockMap.get(startBlock.getKey()) == null && blockMap.get(endBlock.getKey()) != null && endBlock.getParentKey() === startBlock.getKey() && endBlock.getPrevSiblingKey() == null) {\n      var prevSiblingKey = startBlock.getPrevSiblingKey(); // endBlock becomes next sibling of parent's prevSibling\n\n      transformBlock(endBlock.getKey(), blocks, function (block) {\n        return block.merge({\n          prevSibling: prevSiblingKey\n        });\n      });\n      transformBlock(prevSiblingKey, blocks, function (block) {\n        return block.merge({\n          nextSibling: endBlock.getKey()\n        });\n      }); // Update parent for previous parent's children, and children for that parent\n\n      var prevSibling = prevSiblingKey ? blockMap.get(prevSiblingKey) : null;\n      var newParentKey = prevSibling ? prevSibling.getParentKey() : null;\n      startBlock.getChildKeys().forEach(function (childKey) {\n        transformBlock(childKey, blocks, function (block) {\n          return block.merge({\n            parent: newParentKey // set to null if there is no parent\n\n          });\n        });\n      });\n\n      if (newParentKey != null) {\n        var newParent = blockMap.get(newParentKey);\n        transformBlock(newParentKey, blocks, function (block) {\n          return block.merge({\n            children: newParent.getChildKeys().concat(startBlock.getChildKeys())\n          });\n        });\n      } // last child of deleted parent should point to next sibling\n\n\n      transformBlock(startBlock.getChildKeys().find(function (key) {\n        var block = blockMap.get(key);\n        return block.getNextSiblingKey() === null;\n      }), blocks, function (block) {\n        return block.merge({\n          nextSibling: startBlock.getNextSiblingKey()\n        });\n      });\n    }\n  });\n};\n\nvar removeRangeFromContentState = function removeRangeFromContentState(contentState, selectionState) {\n  if (selectionState.isCollapsed()) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n  var startBlock = blockMap.get(startKey);\n  var endBlock = blockMap.get(endKey); // we assume that ContentBlockNode and ContentBlocks are not mixed together\n\n  var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode; // used to retain blocks that should not be deleted to avoid orphan children\n\n  var parentAncestors = [];\n\n  if (isExperimentalTreeBlock) {\n    var endBlockchildrenKeys = endBlock.getChildKeys();\n    var endBlockAncestors = getAncestorsKeys(endKey, blockMap); // endBlock has unselected siblings so we can not remove its ancestors parents\n\n    if (endBlock.getNextSiblingKey()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors);\n    } // endBlock has children so can not remove this block or any of its ancestors\n\n\n    if (!endBlockchildrenKeys.isEmpty()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors.concat([endKey]));\n    } // we need to retain all ancestors of the next delimiter block\n\n\n    parentAncestors = parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap));\n  }\n\n  var characterList;\n\n  if (startBlock === endBlock) {\n    characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);\n  } else {\n    characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));\n  }\n\n  var modifiedStart = startBlock.merge({\n    text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),\n    characterList: characterList\n  }); // If cursor (collapsed) is at the start of the first child, delete parent\n  // instead of child\n\n  var shouldDeleteParent = isExperimentalTreeBlock && startOffset === 0 && endOffset === 0 && endBlock.getParentKey() === startKey && endBlock.getPrevSiblingKey() == null;\n  var newBlocks = shouldDeleteParent ? Map([[startKey, null]]) : blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).filter(function (_, k) {\n    return parentAncestors.indexOf(k) === -1;\n  }).concat(Map([[endKey, null]])).map(function (_, k) {\n    return k === startKey ? modifiedStart : null;\n  });\n  var updatedBlockMap = blockMap.merge(newBlocks).filter(function (block) {\n    return !!block;\n  }); // Only update tree block pointers if the range is across blocks\n\n  if (isExperimentalTreeBlock && startBlock !== endBlock) {\n    updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);\n  }\n\n  return contentState.merge({\n    blockMap: updatedBlockMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: startKey,\n      anchorOffset: startOffset,\n      focusKey: startKey,\n      focusOffset: startOffset,\n      isBackward: false\n    })\n  });\n};\n/**\n * Maintain persistence for target list when removing characters on the\n * head and tail of the character list.\n */\n\n\nvar removeFromList = function removeFromList(targetList, startOffset, endOffset) {\n  if (startOffset === 0) {\n    while (startOffset < endOffset) {\n      targetList = targetList.shift();\n      startOffset++;\n    }\n  } else if (endOffset === targetList.count()) {\n    while (endOffset > startOffset) {\n      targetList = targetList.pop();\n      endOffset--;\n    }\n  } else {\n    var head = targetList.slice(0, startOffset);\n    var tail = targetList.slice(endOffset);\n    targetList = head.concat(tail).toList();\n  }\n\n  return targetList;\n};\n\nmodule.exports = removeRangeFromContentState;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/draft-js/lib/removeRangeFromContentState.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}}],"sources":{"../node_modules/draft-js/lib/removeRangeFromContentState.js":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar getNextDelimiterBlockKey = require(\"./getNextDelimiterBlockKey\");\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List,\n    Map = Immutable.Map;\n\nvar transformBlock = function transformBlock(key, blockMap, func) {\n  if (!key) {\n    return;\n  }\n\n  var block = blockMap.get(key);\n\n  if (!block) {\n    return;\n  }\n\n  blockMap.set(key, func(block));\n};\n/**\n * Ancestors needs to be preserved when there are non selected\n * children to make sure we do not leave any orphans behind\n */\n\n\nvar getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {\n  var parents = [];\n\n  if (!blockKey) {\n    return parents;\n  }\n\n  var blockNode = blockMap.get(blockKey);\n\n  while (blockNode && blockNode.getParentKey()) {\n    var parentKey = blockNode.getParentKey();\n\n    if (parentKey) {\n      parents.push(parentKey);\n    }\n\n    blockNode = parentKey ? blockMap.get(parentKey) : null;\n  }\n\n  return parents;\n};\n/**\n * Get all next delimiter keys until we hit a root delimiter and return\n * an array of key references\n */\n\n\nvar getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {\n  var nextDelimiters = [];\n\n  if (!block) {\n    return nextDelimiters;\n  }\n\n  var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\n\n  while (nextDelimiter && blockMap.get(nextDelimiter)) {\n    var _block = blockMap.get(nextDelimiter);\n\n    nextDelimiters.push(nextDelimiter); // we do not need to keep checking all root node siblings, just the first occurance\n\n    nextDelimiter = _block.getParentKey() ? getNextDelimiterBlockKey(_block, blockMap) : null;\n  }\n\n  return nextDelimiters;\n};\n\nvar getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  } // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n\n\n  var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();\n\n  while (nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)) {\n    nextValidSiblingKey = originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\n  }\n\n  return nextValidSiblingKey;\n};\n\nvar getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  } // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n\n\n  var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();\n\n  while (prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)) {\n    prevValidSiblingKey = originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\n  }\n\n  return prevValidSiblingKey;\n};\n\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, startBlock, endBlock, originalBlockMap) {\n  return blockMap.withMutations(function (blocks) {\n    // update start block if its retained\n    transformBlock(startBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n      });\n    }); // update endblock if its retained\n\n    transformBlock(endBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n      });\n    }); // update start block parent ancestors\n\n    getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      return transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    }); // update start block next - can only happen if startBlock == endBlock\n\n    transformBlock(startBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: startBlock.getPrevSiblingKey()\n      });\n    }); // update start block prev\n\n    transformBlock(startBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(block, blocks, originalBlockMap)\n      });\n    }); // update end block next\n\n    transformBlock(endBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n      });\n    }); // update end block prev\n\n    transformBlock(endBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: endBlock.getNextSiblingKey()\n      });\n    }); // update end block parent ancestors\n\n    getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    }); // update next delimiters all the way to a root delimiter\n\n    getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function (delimiterKey) {\n      return transformBlock(delimiterKey, blocks, function (block) {\n        return block.merge({\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    }); // if parent (startBlock) was deleted\n\n    if (blockMap.get(startBlock.getKey()) == null && blockMap.get(endBlock.getKey()) != null && endBlock.getParentKey() === startBlock.getKey() && endBlock.getPrevSiblingKey() == null) {\n      var prevSiblingKey = startBlock.getPrevSiblingKey(); // endBlock becomes next sibling of parent's prevSibling\n\n      transformBlock(endBlock.getKey(), blocks, function (block) {\n        return block.merge({\n          prevSibling: prevSiblingKey\n        });\n      });\n      transformBlock(prevSiblingKey, blocks, function (block) {\n        return block.merge({\n          nextSibling: endBlock.getKey()\n        });\n      }); // Update parent for previous parent's children, and children for that parent\n\n      var prevSibling = prevSiblingKey ? blockMap.get(prevSiblingKey) : null;\n      var newParentKey = prevSibling ? prevSibling.getParentKey() : null;\n      startBlock.getChildKeys().forEach(function (childKey) {\n        transformBlock(childKey, blocks, function (block) {\n          return block.merge({\n            parent: newParentKey // set to null if there is no parent\n\n          });\n        });\n      });\n\n      if (newParentKey != null) {\n        var newParent = blockMap.get(newParentKey);\n        transformBlock(newParentKey, blocks, function (block) {\n          return block.merge({\n            children: newParent.getChildKeys().concat(startBlock.getChildKeys())\n          });\n        });\n      } // last child of deleted parent should point to next sibling\n\n\n      transformBlock(startBlock.getChildKeys().find(function (key) {\n        var block = blockMap.get(key);\n        return block.getNextSiblingKey() === null;\n      }), blocks, function (block) {\n        return block.merge({\n          nextSibling: startBlock.getNextSiblingKey()\n        });\n      });\n    }\n  });\n};\n\nvar removeRangeFromContentState = function removeRangeFromContentState(contentState, selectionState) {\n  if (selectionState.isCollapsed()) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n  var startBlock = blockMap.get(startKey);\n  var endBlock = blockMap.get(endKey); // we assume that ContentBlockNode and ContentBlocks are not mixed together\n\n  var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode; // used to retain blocks that should not be deleted to avoid orphan children\n\n  var parentAncestors = [];\n\n  if (isExperimentalTreeBlock) {\n    var endBlockchildrenKeys = endBlock.getChildKeys();\n    var endBlockAncestors = getAncestorsKeys(endKey, blockMap); // endBlock has unselected siblings so we can not remove its ancestors parents\n\n    if (endBlock.getNextSiblingKey()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors);\n    } // endBlock has children so can not remove this block or any of its ancestors\n\n\n    if (!endBlockchildrenKeys.isEmpty()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors.concat([endKey]));\n    } // we need to retain all ancestors of the next delimiter block\n\n\n    parentAncestors = parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap));\n  }\n\n  var characterList;\n\n  if (startBlock === endBlock) {\n    characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);\n  } else {\n    characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));\n  }\n\n  var modifiedStart = startBlock.merge({\n    text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),\n    characterList: characterList\n  }); // If cursor (collapsed) is at the start of the first child, delete parent\n  // instead of child\n\n  var shouldDeleteParent = isExperimentalTreeBlock && startOffset === 0 && endOffset === 0 && endBlock.getParentKey() === startKey && endBlock.getPrevSiblingKey() == null;\n  var newBlocks = shouldDeleteParent ? Map([[startKey, null]]) : blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).filter(function (_, k) {\n    return parentAncestors.indexOf(k) === -1;\n  }).concat(Map([[endKey, null]])).map(function (_, k) {\n    return k === startKey ? modifiedStart : null;\n  });\n  var updatedBlockMap = blockMap.merge(newBlocks).filter(function (block) {\n    return !!block;\n  }); // Only update tree block pointers if the range is across blocks\n\n  if (isExperimentalTreeBlock && startBlock !== endBlock) {\n    updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);\n  }\n\n  return contentState.merge({\n    blockMap: updatedBlockMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: startKey,\n      anchorOffset: startOffset,\n      focusKey: startKey,\n      focusOffset: startOffset,\n      isBackward: false\n    })\n  });\n};\n/**\n * Maintain persistence for target list when removing characters on the\n * head and tail of the character list.\n */\n\n\nvar removeFromList = function removeFromList(targetList, startOffset, endOffset) {\n  if (startOffset === 0) {\n    while (startOffset < endOffset) {\n      targetList = targetList.shift();\n      startOffset++;\n    }\n  } else if (endOffset === targetList.count()) {\n    while (endOffset > startOffset) {\n      targetList = targetList.pop();\n      endOffset--;\n    }\n  } else {\n    var head = targetList.slice(0, startOffset);\n    var tail = targetList.slice(endOffset);\n    targetList = head.concat(tail).toList();\n  }\n\n  return targetList;\n};\n\nmodule.exports = removeRangeFromContentState;"},"lineCount":345}},"error":null,"hash":"adea72b3510523025f1523e37042647a","cacheData":{"env":{}}}